2024\03\15

//求n的阶乘
int Fac1(int n)
{
	int i = 1;
	int ret = 1;
	for (i = 1; i <= n; i++)
	{
		ret *= i;
	}
	return ret;
}
int Fac2(int n)
{
	if (n > 1)
		return n * Fac2(n - 1);
	else
		return 1;
}

int main()
{
	int n = 0;
	scanf("%d", &n);
//	int ret = Fac1(n);//用循环
	int ret = Fac2(n);//用递归
	printf("%d", ret);
	return 0;
}

////不创建临时变量，求字符串长度
//int my_strlen(char* str)
//{
//	if (*str != '\0')
//		return 1 + my_strlen(str + 1);
//	else
//		return 0;
//}
//
//int main()
//{
//	char arr[] = "Hello";
//	int len = my_strlen(arr);
//	printf("len = %d\n", len);
//	return 0;
//}

////输出字符串的长度
//int my_strlen(char* str)
//{
//	int count = 0;
//	while (*str != '\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
//int main()
//{
//	char arr[] = "Hello";
//	int len = my_strlen(arr);//用自己写的函数返回字符串长度
//	printf("len = %d\n", len);
//	return 0;
//}

////递归初用
//void print(int n)
//{
//	if (n > 9)
//	{
//		print(n / 10);
//	}
//	printf("%d ", n % 10);
//
//}
//
//int main()
//{
//	int n;
//	scanf("%d", &n);//1234
//	print(n);//1 2 3 4
//}

////函数的声明
//int Add(int x, int y);
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = 0;
//	//函数调用
//	sum = Add(a, b);
//	printf("sum = %d", sum);
//	return 0;
//}
//
////函数的定义
//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return(z);
//}
//多成员分工一个项目时，通常会分配相应的任务
//当每个人的任务整合在一起时，若要使用他人的函数，引用一下相应函数的头文件即可(#include "函数名.h")
//函数声明放在头文件（函数名.h）,函数定义放在源文件里（函数名.c）

//int main()
//{
//	printf("%d", printf("%d", printf("%d", 43)));//4321
//	//		       1  	        2		   43
//	//printf返回值为打印字符的个数
//	return 0;
//}

//void Add(int* p)
//{
//	//*p++;// ++ 优先级高于 *p
//	(*p)++;
//}
//
//int main()
//{
//	int num = 0;
//	Add(&num);
//	printf("%d\n", num);
//	Add(&num);
//	printf("%d\n", num);
//	Add(&num);
//	printf("%d\n", num);
//}

//  				//本质上arr是个指针   大小为（4/8）
//int binary_search(int arr[], int k, int sz)
//{
//	
//	int left = 0;
//	int right = sz - 1;
//
//	
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;
//		if (k > arr[mid])
//		{
//			left = mid + 1;
//		}
//		else if (k < arr[mid])
//		{
//			right = mid - 1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	return -1;
//}
//int main()
//{
//	//用函数来实现二分查找
//	//找到返回该值下标，未找到返回-1
//	char arr[] = { 1,2,3,4,5,6,7,8,9 };
//	int k = 7;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int ret = binary_search(arr, k, sz);
//						//传递过去的是数组arr首元素的地址
//	if (k == -1)
//	{
//		printf("未找到该值\n");
//	}
//	else
//	{
//	printf("下标为%d\n", k);
//	}
//	return 0;
//}
