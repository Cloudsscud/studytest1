2024\03\16

#include<stdio.h>

//int main()
//{
//	//int arr1[10] = { 1,2,3 };//不完全初始化,剩下元素默认为0
//	char arr1[] = { 'a', 'b', 'c' };
//	char arr2[] = "abc";
//	printf("%d\n", sizeof(arr1));//3
//	printf("%d\n", strlen(arr1));//随机值
//	printf("%d\n", sizeof(arr2));//4
//	printf("%d\n", strlen(arr2));//3
//	return 0;
//}

//int main()
//{
//	//三行四列的二维数组
//	int arr[3][4] = { {1,2,3}, { 4,5 } };
//	//1 2 3 0
//	//4 5 0 0
//	//0 0 0 0 
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 4; j++)
//		{
//			//printf("%d ", arr[i][j]);
//			printf("&arr[%d][%d] = %p\n", i, j, &arr[i][j]);//数组在内存中是依次存放的
//		}
//		//printf("\n");
//	}
//	return 0;
//}

//冒泡排序
void bubble_sort(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (arr[j] > arr[j + 1])//较大的那个数往后放
			{
				int tmp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = tmp;
			}
		}
	}
}

int main()
{
	int i = 0;
	int arr[] = { 9, 8, 7, 6, 10, 5,4,2, 1, 0 };
	//按升序排列
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz);
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

优化
////冒泡排序
//void bubble_sort(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		int flag = 1;//假设这一趟之后，要排的数据已经排好序了
//
//		//每一趟冒泡排序
//		int j = 0;
//		for (j = 0; j < sz - 1 - i; j++)
//		{
//
//			if (arr[j] > arr[j + 1])//较大的那个数往后放
//			{
//				int tmp = arr[j];
//				arr[j] = arr[j+1];
//				arr[j+1] = tmp;
//				flag = 0;//说明这一趟还没有没有排好序
//			}
//		}
//		if (flag == 1)
//		{
//			break;//这一趟已经排好序了，所以结束
//		}
//	}
//}
//
//int main()
//{
//	int i = 0;
//	int arr[] = { 9, 8, 3, 6, 10, 5, 4, 2, 1, 0, 7 };
//	//按升序排列
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	bubble_sort(arr, sz);
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}

//int main()
//{
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7 };
//	printf("%p\n", arr);//数组首元素地址
//	printf("%p\n", arr+1);//第二个元素地址
//
//	printf("%p\n", &arr[0]);//数组首元素地址
//	printf("%p\n", &arr[0]+1);//第二个元素地址
//
//	printf("%p\n", &arr);//包含一整个数组，但只显示首个元素的地址
//	printf("%p\n", &arr+1);//此为第二个数组，显示的是第二个数组首元素地址
//	return 0;
//}
