2024/03/28

#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>

//int main()
//{
//	int i = 0;
//	int sum = 0;//保存最后结果
//	int n = 0;
//	int ret = 1;//保存n的阶乘
//	scanf("%d", &n);
//	for (i = 0; i <= n; i++)
//	{
//		int j = 0;
//		ret = 1;//修改后
//		for (j = 1; j <= i; j++)
//		{
//			ret *= j;//ret未重置
//		}
//		sum += ret;
//	}
//	printf("%d", sum);
//	return 0;
//}

//int main()
//{
//	int i = 0;
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	for (i = 0; i <= 12; i++)	//如果出现死循环：在创建局部变量i，arr时要存放在栈区
//								//由于栈区的默认使用是先使用高地址的空间，再使用低地址空间，所以i在高地址，arr在低地址
//								//但随着数组下标的增长，地址是从低向高变化的，所以当数组越界访问到一定程度时，会导致i被改变(此处为0)
//								//i为0，不断循环，最终成了死循环
//	{
//		printf("hehe\n");
//		arr[i] = 0;
//	}
//	return 0;
//}

//实现strcpy
//void my_strcpy(char* dest,char* sous)
//{
//	while (*sous != '\0')//可优化
//	{
//		*dest = *sous;
//		sous++;
//		dest++;
//	}
//	*dest = *sous;//传'\0'
//}

//void my_strcpy(char* dest,char* sous)
//{
//	if (dest != NULL && sous != NULL)//二次优化后，相当于规避了问题，不易发现问题，可再次优化
//	{
//		while (*dest++ = *sous++)//当sous传完，sous为假，结束
//		{
//			;				//当sous或者dest为空指针时，有问题--可二次优化
//		}
//	}
//}

//#include<assert.h>
//void my_strcpy(char* dest, char* sous)
//{
//	assert(dest != NULL);//断言		//为假时报错，并提醒错误位置
//	assert(sous != NULL);			//为真时无影响
// //将字符串拷贝到dest对应的字符串里，包括'\0'
//	while (*dest++ = *sous++)
//	{
//		;
//	}
//}
//
//int main()
//{
//	char arr1[] = "#################";
//	char arr2[] = "Welcome!";
//	my_strcpy(arr1,NULL);
//	printf("%s\n", arr1);
//	return 0;
//}
			//const 修饰的指针变量位置不同，效果不同
			// const int* p = &a; const在*之前，影响的是指针变量对应元素的值，即a的值无法通过*p来改变;
			//					但是指针变量p可以改为其他元素（如b）的地址
			//int* const p = &a; const在*之后，影响的是指针变量本身，即指针变量不能改为其他元素的地址，p只能对应a；
			//					但是可以*p来改变a的值

//#include<assert.h>
//使用const保护sous指向的元素不被更改
//void my_strcpy(char* dest,  const char* sous)
//{
//	assert(dest != NULL);
//	assert(sous != NULL);
// //将字符串拷贝到dest对应的字符串里，包括'\0'
//	while (*dest++ = *sous++)
//	{
//		;
//	}

////最终版
//#include<assert.h>
//char* my_strcpy(char* dest,  const char* sous)//该函数应该是有返回值的，返回的是更改后的字符串
//{
//	char* ret = dest;
//	assert(dest != NULL);
//	assert(sous != NULL);
//	//将字符串拷贝到dest对应的字符串里，包括'\0'
//	while (*dest++ = *sous++)
//	{
//		;
//	}
//	return ret;
//}
//int main()
//{
//	char arr1[] = "#################";
//	char arr2[] = "Welcome!0^0";
//	printf("%s\n", my_strcpy(arr1, arr2));
//	return 0;
//}

////求字符串字符个数
//#include<assert.h>
//int my_strlen(const char* str)
//{
//	int count = 0;
//	assert(str != NULL);
//	while (*str != '\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
//
//int main()
//{
//	char str[] = "abcdefg";
//	int len = my_strlen(str);
//	printf("%d\n", len);
//	return 0;
//}
