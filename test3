2024/03/25 26

//void Init(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		arr[i] = 0;
//	}
//}
//
//void Print(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//}
//
//void Reserve(int arr[], int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//	while (left < right)
//	{
//		int temp = arr[left];
//		arr[left] = arr[right];
//		arr[right] = temp;
//		left++;
//		right--;
//	}
//}
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,9,8,7,5,4 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//Init(arr, sz);//初始化函数
//	Print(arr, sz);//打印函数
//	Reserve(arr, sz);//逆置函数
//	Print(arr, sz);
//
//	return 0;
//}

////依次打印一个二进制数的奇数位或偶数位
//int main()
//{
//	int a = 10;
//	int i = 0;
//	printf("偶数位为:");
//	for (i = 31; i >= 1; i -= 2)
//	{
//		printf("%d ", (a >> i) & 1);
//	}
//	printf("\n");
//	printf("奇数位为:");
//	for (i = 30; i >= 0; i -= 2)
//	{
//		printf("%d ", (a >> i) & 1);
//	}
//	return 0;
//}

//用递归实现一个数组元素的逆序
int my_strlen(char* str)
{
	int count = 0;
	while (*str != '\0')
	{
		count++;
		str++;
	}
	return count;
}

void nipai(char arr[])
{
	int len = my_strlen(arr);
	char temp = arr[0];
	arr[0] = arr[len - 1];
	arr[len - 1] = '\0';
	if (my_strlen(arr+1) >= 2)
		nipai(arr + 1);
	arr[len - 1] = temp;
}

int main()
{
	char arr[] = "abcdefg";
	nipai(arr);
	printf("%s", arr);
	return 0;
}
